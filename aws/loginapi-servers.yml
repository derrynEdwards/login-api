Description: >
  Derryn Edwards / AWS Microservice EKS CF Stack
  This script creates an AutoScaling group for a bastion host
  in each Availability Zone and worker nodes for Kubernetes
  (one in each AZ) and deploys a LoadBalancer. Deploys the
  Kubernetes cluster.

Parameters:
  EnvironmentName:
    Description: Single Parameter that we are passing with the env name.
    Type: String

  OSImage:
    Description: Single Parameter containing the AMI ID.
    Type: String
    Default: "ami-0d1cd67c26f5fca1"

  InstanceSize:
    Description: Single Parameter containing the Instance Size.
    Type: String
    Default: "t2.medium"

Resources:
  #Security Groups
  LBSecGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow http to our load balancer.
      VpcId:
        Fn::ImportValue:
          !Sub ${EnvironmentName}-VPCID
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 80
        ToPort: 80
        CidrIp: 0.0.0.0/0
      - IpProtocol: tcp
        FromPort: 80
        ToPort: 80
        CidrIpv6: ::/0
      SecurityGroupEgress:
      - IpProtocol: tcp
        FromPort: 80
        ToPort: 80
        CidrIp: 0.0.0.0/0
      - IpProtocol: tcp
        FromPort: 80
        ToPort: 80
        CidrIpv6: ::/0
  WebServerSecGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow http to our hosts and SSH from local only.
      VpcId:
        Fn::ImportValue:
          !Sub ${EnvironmentName}-VPCID
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 80
        ToPort: 80
        CidrIp: 0.0.0.0/0
      - IpProtocol: tcp
        FromPort: 22
        ToPort: 22
        CidrIp: 0.0.0.0/0
      - IpProtocol: tcp
        FromPort: 80
        ToPort: 80
        CidrIpv6: ::/0
      SecurityGroupEgress:
      - IpProtocol: tcp
        FromPort: 0
        ToPort: 65535
        CidrIp: 0.0.0.0/0
  #LaunchConfig
  WebAppLaunchConfig:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash
          apt update
          apt install docker.io -y
          apt install conntrack -y
          systemctl enable docker
          systemctl start docker
          curl -LO https://storage.googleapis.com/kubernetes-release/release/`curl -s https://storage.googleapis.com/kubernetes-release/release/stable.txt`/bin/linux/amd64/kubectl
          chmod +x ./kubectl
          mv ./kubectl /usr/bin/
          curl -LO https://storage.googleapis.com/minikube/releases/latest/minikube_1.9.1-0_amd64.deb
          dpkg -i minikube_1.9.1-0_amd64.deb
          minikube start --driver=none
          kubectl run loginapi --image=xwindwolfx/login-api:latest --port=80 --labels app=login-api
          kubectl port-forward loginapi 80:5000
      ImageId: !Ref OSImage
      KeyName: '{{resolve:ssm:EC2KEY:1}}'
      SecurityGroups:
      - Ref: WebServerSecGroup
      InstanceType: !Ref InstanceSize
      BlockDeviceMappings:
      - DeviceName: "/dev/sdk"
        Ebs:
          VolumeSize: '10'
  #AutoScalingGroup
  WebAppGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      VPCZoneIdentifier:
      - Fn::ImportValue:
          !Sub ${EnvironmentName}-PRIV-NETS
      LaunchConfigurationName:
        Ref: WebAppLaunchConfig
      MinSize: '4'
      MaxSize: '6'
      TargetGroupARNs:
      - Ref: WebAppTargetGroup
  WebAppLB:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Subnets:
      - Fn::ImportValue: !Sub ${EnvironmentName}-PUB1-SN
      - Fn::ImportValue: !Sub ${EnvironmentName}-PUB2-SN
      SecurityGroups:
      - Ref: LBSecGroup
  Listener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
      - Type: forward
        TargetGroupArn:
          Ref: WebAppTargetGroup
      LoadBalancerArn:
        Ref: WebAppLB
      Port: '80'
      Protocol: HTTP
  ALBListenerRule:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties:
      Actions:
      - Type: forward
        TargetGroupArn: !Ref WebAppTargetGroup
      Conditions:
      - Field: path-pattern
        Values: [/]
      ListenerArn: !Ref Listener
      Priority: 1
  WebAppTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckIntervalSeconds: 10
      HealthCheckPath: /
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 8
      HealthyThresholdCount: 2
      Port: 80
      Protocol: HTTP
      UnhealthyThresholdCount: 5
      VpcId:
        Fn::ImportValue:
          Fn::Sub: ${EnvironmentName}-VPCID
#Output DNS Name
Outputs:
  EndpointURL:
    Description: The public url to the load balancer.
    Value: !Join ["",["http://" , !GetAtt WebAppLB.DNSName ]]